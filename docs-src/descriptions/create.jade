h2#create-stream Create a stream


+descr-method('emitter', 'emitter', 'Kefir.emitter()').
  Creates an emitter, that is ordinary stream, but also has additional methods:
  <tt>.emit(value)</tt> and <tt>.end()</tt>.
  Then you can easily send events to stream via <b>emit()</b>.

pre(title='code').
  var emitter = Kefir.emitter();
  emitter.log(); // log events to console (see <a href="#log">log</a>)
  emitter.emit(1);
  emitter.emit(2);
  emitter.end();

pre(title='console output')
  :escapehtml
    => [emitter] <value> 1
    => [emitter] <value> 2
    => [emitter] <end>

p.
  <img data-emoji="point_up"> <b>emitter</b> is the easiest way
  to create general purpose stream,
  but it doesn't give control over <b>active</b> state of stream
  (see <a href="#active-state">active state</a>).
  If you want to create general purpose stream and
  have control over <b>active</b> state, you should use
  <a href="from-binder">fromBinder</a>.




+descr-method('never', 'never', 'Kefir.never()').
  Creates a stream, that already ended will never produce any events.

pre(title='code').
  var stream = Kefir.never();
  stream.log();

pre(title='console output')
  :escapehtml
    => [never] <end:current>
div




+descr-method('later', 'later', 'Kefir.later(wait, value)').
  Creates a stream, that produces single <b>value</b>
  after <b>wait</b> milliseconds then ends.

pre(title='code').
  var stream = Kefir.later(1000, 1);
  stream.log();

pre(title='console output (after 1 second)')
  :escapehtml
    => [later] <value> 1
    => [later] <end>
div



+descr-method('interval', 'interval', 'Kefir.interval(interval, value)').
  Creates a stream, that produces same <b>value</b>
  each <b>interval</b> milliseconds. Never ends.

pre(title='code').
  var stream = Kefir.interval(1000, 1);
  stream.log();

pre(title='console output')
  :escapehtml
    => [interval] <value> 1
    => [interval] <value> 1
    => [interval] <value> 1
    ...
div


+descr-method('sequentially', 'sequentially', 'Kefir.sequentially(interval, values)').
  Creates a stream containing given <b>values</b> (array),
  delivered with given <b>interval</b> in milliseconds.
  Ends after all <b>values</b> delivered.

pre(title='code').
  var stream = Kefir.sequentially(1000, [1, 2, 3]);
  stream.log();

pre(title='console output')
  :escapehtml
    => [sequentially] <value> 1
    => [sequentially] <value> 2
    => [sequentially] <value> 3
    => [sequentially] <end>
div


+descr-method('repeatedly', 'repeatedly', 'Kefir.repeatedly(interval, values)').
  Creates a stream, that produces given <b>values</b> (array),
  with given <b>interval</b> in milliseconds.
  When all values emitted, it begins to produce them again from start.
  Never ends.

pre(title='code').
  var stream = Kefir.repeatedly(1000, [1, 2, 3]);
  stream.log();

pre(title='console output')
  :escapehtml
    => [repeatedly] <value> 1
    => [repeatedly] <value> 2
    => [repeatedly] <value> 3
    => [repeatedly] <value> 1
    => [repeatedly] <value> 2
    => [repeatedly] <value> 3
    => [repeatedly] <value> 1
    ...
div


+descr-method('from-poll', 'fromPoll', 'Kefir.fromPoll(interval, fn)').
  Creates a stream, that polls given <b>fn</b> function,
  with given <b>interval</b> in milliseconds,
  and emits values returned by <b>fn</b>.
  Never ends.

pre(title='code').
  var start = new Date();
  var stream = Kefir.fromPoll(1000, function(){ return new Date() - start });
  stream.log();

pre(title='console output')
  :escapehtml
    => [fromPoll] <value> 1001
    => [fromPoll] <value> 2002
    => [fromPoll] <value> 3004
    => [fromPoll] <value> 4006
    => [fromPoll] <value> 5007
    => [fromPoll] <value> 6007
    ...
div


+descr-method('with-interval', 'withInterval', 'Kefir.withInterval(interval, handler)').
  General method to create an interval based stream.
  Creates a stream, that call given <b>handler</b> function,
  with given <b>interval</b> in milliseconds.
  <b>Handler</b> beings called with one argument — <b>send</b> function,
  which you can call to emit value or end the stream (see example).

pre(title='code')
  :escapehtml
    var start = new Date();
    var stream = Kefir.withInterval(1000, function(send) {
      var time = new Date() - start;
      if (time < 4000) {
        send('value', time);   // emit value
      } else {
        send('end');           // end the stream
      }
    });
    stream.log();

pre(title='console output')
  :escapehtml
    => [withInterval] <value> 1002
    => [withInterval] <value> 2003
    => [withInterval] <value> 3005
    => [withInterval] <end>
    ...
div

p.
  <b>Send</b> function accepts two arguments —
  event <b>type</b> (<tt>'value'</tt> or <tt>'end'</tt>),
  and <b>value</b> (ignored if <b>type</b> is <tt>'end'</tt>).
  You may call <b>send</b> several times on each interval tick,
  or not call it at all.




+descr-method('from-binder', 'fromBinder', 'Kefir.fromBinder(subscribe)').
  Another method for creation general purpose stream,
  along with <a href="#emitter">emitter</a>.
  Unlike <b>emitter</b> it gives you control over
  <a href="#active-state">active state</a> of the stream.

p.
  Creates stream which call <b>subscribe</b> function on each <b>activation</b>,
  passing to it an <b>send</b> function
  (just like in <a href="#with-interval">withInterval</a>).
  Then you can call <b>send</b> at any time to emit value or end the stream.
  <b>Subscribe</b> function can also return an <b>unsubscribe</b> function,
  that will be called on <b>deactivation</b> of the stream.
  Read about <a href="#active-state">active state</a> to understand what
  <b>activation</b> and <b>deactivation</b> means.

pre(title='code')
  :escapehtml
    var stream = Kefir.fromBinder(function(send) {
      console.log('!activation');
      var i = 0;
      var intervalId = setInterval(function() {
        send('value', ++i);
      }, 1000);
      return function() {
        console.log('!deactivation');
        clearInterval(intervalId);
      }
    });
    stream.log();
    setTimeout(function() {
      stream.offLog(); // turn off logging to deactivate stream
    }, 3500);

pre(title='console output')
  :escapehtml
    => !activation
    => [fromBinder] <value> 1
    => [fromBinder] <value> 2
    => [fromBinder] <value> 3
    => !deactivation
div




h2#create-property Create a property

p.
  For now there is only one method that creates a property directly —
  <tt>constant()</tt>. But you can always convert any stream to a property using
  <a href="#to-property">toProperty</a> method.

+descr-method('constant', 'constant', 'Kefir.constant(value)').
  Creates ended property, with specified <b>current value</b>.

pre(title='code').
  property = Kefir.constant(1);
  property.log();

pre(title='console output')
  :escapehtml
    => [constant] <value:current> 1
    => [constant] <end:current>
div

