h2#main-methods Subscribe / add side effects


+descr-method('on-value', 'onValue', 'obs.onValue(callback)').
  Subscribes #[b callback] to values on an observable.

p.
  If called on a property, which has a current value,
  #[b callback] will be called immediately (synchronously)
  with that value.

pre(title='example').
  var stream = Kefir.sequentially(1000, [1, 2]);
  stream.onValue(function(x) {
    console.log('value:', x);
  });

pre(title='console output')
  :escapehtml
    > value: 1
    > value: 2

+descr-method('off-value', 'offValue', 'obs.offValue(callback)').
  Unsubscribes #[b callback] from values on an observable.


+descr-method('on-error', 'onError', 'obs.onError(callback)').
  Subscribes #[b callback] to #[a(href='#about-errors') errors] on an observable.

p.
  If called on a property, which has a current error,
  #[b callback] will be called immediately (synchronously)
  with that error.

pre(title='example').
  var stream = Kefir.sequentially(1000, [1, 2]).valuesToErrors();
  stream.onError(function(x) {
    console.log('error:', x);
  });

pre(title='console output')
  :escapehtml
    > error: 1
    > error: 2

+descr-method('off-error', 'offError', 'obs.offError(callback)').
  Unsubscribes #[b callback] from errors on an observable.


+descr-method('on-end', 'onEnd', 'obs.onEnd(callback)').
  Subscribes #[b callback] to ending of an observable.

p.
  If observable is already ended, #[b callback] will be called immediately (synchronously).

pre(title='example').
  var stream = Kefir.sequentially(1000, [1, 2]);
  stream.onEnd(function() {
    console.log('stream ended');
  });

pre(title='console output')
  :escapehtml
    > stream ended

+descr-method('off-end', 'offEnd', 'obs.offEnd(callback)').
  Unsubscribes #[b callback] from ending of an observable.

+descr-method('on-any', 'onAny', 'obs.onAny(callback)').
  Subscribes #[b callback] to all three types of events.
  Callback is called with an #[b event object] as argument. Each event object
  contains three attributes — #[b type], #[b value], and #[b current].

ul
  li #[b type] — a #[tt 'value'], #[tt 'error'], or #[tt 'end'] string
  li #[b value] — the emitted #[b value] or #[b error] (#[tt undefined] if #[tt event.type === 'end'])
  li #[b current] — a boolean, that equals #[tt true] if the callback is called with the current value/error of a property, or if the event represents an #[b end] of an already ended observable (note that #[a(href='#current-in-streams') streams may also emit current] values or errors)

pre(title='example').
  var stream = Kefir.sequentially(1000, [1, 2]);
  stream.onAny(function(event) {
    console.log('event:', event);
  });

pre(title='console output')
  :escapehtml
    > event: Object {type: "value", value: 1, current: false}
    > event: Object {type: "error", value: 2, current: false}
    > event: Object {type: "end", value: undefined, current: false}

+descr-method('off-any', 'offAny', 'obs.offAny(callback)').
  Unsubscribes an #[b onAny] subscriber.

+descr-method('log', 'log', 'obs.log([name])').
  Turns on logging of any event to the browser console.
  Accepts an optional #[b name] argument that will be shown in the log if provided.

pre(title='example').
  var stream = Kefir.sequentially(1000, [1, 2]);
  stream.log('my stream');

pre(title='console output')
  :escapehtml
    > my stream <value> 1
    > my stream <value> 2
    > my stream <end>

+descr-method('off-log', 'offLog', 'obs.offLog([name])').
  Turns off logging. If #[b .log] was called with a #[b name] argument,
  #[b offLog] must be called with the same #[b name] argument.


+descr-method('to-promise', 'toPromise', 'obs.toPromise([PromiseConstructor])').
  Another way to take events out of Kefir is to convert an Observable to a Promise.
  If called without arguments the default #[tt gloabal.Promise] constructor is used,
  alternatively you can pass a promise constructor
  that supports following interface: #[tt new Promise(function(resolve, reject) { ... })].
  The promise will be fulfilled or rejected at the moment source observable ends,
  with the latest value or error. If observable ends without any value or error
  the promise will never be fulfilled/rejected.

pre(title='example').
  var promise = Kefir.sequentially(1000, [1, 2]).toPromise();
  promise.then(function(x) {
    console.log('fulfilled with:', x);
  });

pre(title='console output')
  :escapehtml
    > fulfilled with: 2
