// node --expose-gc test-memory-usage.js


var Kefir = require('./dist/kefir.js');
var Bacon = require('baconjs');
var Rx = require('rx');



function toMb(x) {
  return ( x / 1024 / 1024 ).toFixed(2) + ' MiB';
}

function toKb(x) {
  return ( x / 1024 ).toFixed(2) + ' KiB';
}

var __lastMemoryUsage, __lastTime;
function begin(){
  global.gc()
  __lastMemoryUsage = process.memoryUsage().heapUsed;
  __lastTime = Date.now();
}
function end(name){
  global.gc()
  return [process.memoryUsage().heapUsed - __lastMemoryUsage, Date.now() - __lastTime];
}



function createNObservable(msg, n, generator){
  var objects = new Array(n);
  begin()
  for (var i = 0; i < objects.length; i++) {
    objects[i] = generator(i);
  }
  var withoutSubscr = end()

  begin()
  for (var i = 0; i < objects.length; i++) {
    if (msg === 'Rx') {
      objects[i].subscribe(noop);
    } else {
      objects[i].onValue(noop);
    }
  }
  var withSubscr = end();

  var objects = null;
  global.gc();

  var plus = withSubscr[0] > 0 ? '+' : '';
  console.log(
    msg
    + ': w/o subscr. ' + toKb(withoutSubscr[0]/n)
    // + ' ' + (withoutSubscr[1]/n).toFixed(4) + ' ms'
    + ', w/ subscr. ' + plus + toKb(withSubscr[0]/n)
    // + ' ' + (withSubscr[1]/n).toFixed(4) + ' ms'
  );
}

function title(text){
  console.log('\n' + text);
}

function noop(){}


// Just keeps references to listeners
var fakeSource = {
  listeners: [],
  subscribe: function(listener){
    this.listeners.push(listener);
  },
  unsubscribe: function(listener){
    var index = this.listeners.indexOf(listener);
    if (index != -1) {
      this.listeners.splice(index, 1);
    }
  }
}


function baseKefir(){
  var stream = new Kefir.Stream(function(){
    fakeSource.subscribe(send);
  }, function(){
    fakeSource.unsubscribe(send);
  });
  var send = stream.__sendValue.bind(stream);
  return stream;
}

function baseRx(){
  return new Rx.Observable.create(function(observer){
    debugger
    var send = function(x){
      observer.onNext(x);
    }
    fakeSource.subscribe(send);
    return function(){
      fakeSource.unsubscribe(send);
    }
  });
}

function baseBacon(){
  return new Bacon.EventStream(function(sink){
    fakeSource.subscribe(sink);
    return function(){
      fakeSource.unsubscribe(sink);
    }
  });
}






console.log('Generated by run: node --expose-gc test-memory-usage.js > memory-usage-results.txt')
console.log('Please don\'t take these results too serious, I am not 100% sure about correctness of these tests')
console.log('Also these tests do not measure amount of temporary allocated')
console.log('memory that causes frequent garbage collection.')
console.log('')



title('very base stream')

createNObservable('Kefir', 700, baseKefir)
createNObservable('Rx', 700, baseRx)
createNObservable('Bacon', 700, baseBacon)




title('new Bus()')

createNObservable('Kefir', 700, function(){
  return new Kefir.Bus();
})

createNObservable('Bacon', 700, function(){
  return new Bacon.Bus();
})




title('.once(1)')

createNObservable('Kefir', 700, function(i){
  return Kefir.once(i);
})

createNObservable('Bacon', 700, function(i){
  return Bacon.once(i);
})




title('.never()')

createNObservable('Kefir', 700, function(){
  return Kefir.never();
})

createNObservable('Rx', 700, function(){
  return Rx.Observable.never();
})

createNObservable('Bacon', 700, function(){
  return Bacon.never();
})





title('.toProperty(1)')

createNObservable('Kefir', 700, function(){
  return baseKefir().toProperty(1);
})

createNObservable('Rx', 700, function(){
  return baseRx().publishValue(1).refCount()
})

createNObservable('Bacon', 700, function(){
  return baseBacon().toProperty(1);
})




title('.toProperty(1).changes()')

createNObservable('Kefir', 700, function(){
  return baseKefir().toProperty(1).changes();
})

createNObservable('Bacon', 700, function(){
  return baseBacon().toProperty(1).changes();
})




title('.map(noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().map(noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().map(noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().map(noop);
})




title('.filter(noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().filter(noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().filter(noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().filter(noop);
})




title('.skipDuplicates(noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().skipDuplicates(noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().distinctUntilChanged(noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().skipDuplicates(noop);
})




title('.scan(0, noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().scan(0, noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().scan(0, noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().scan(0, noop);
})




title('.sequentially(0, [1, 2])')

createNObservable('Kefir', 700, function(){
  return Kefir.sequentially(0, [1, 2]);
})

createNObservable('Bacon', 700, function(){
  return Bacon.sequentially(0, [1, 2]);
})



title('.later(0, 1)')

createNObservable('Kefir', 700, function(){
  return Kefir.later(0, 1);
})

createNObservable('Bacon', 700, function(){
  return Bacon.later(0, 1);
})





title('.take(5)')

createNObservable('Kefir', 700, function(){
  return baseKefir().take(5);
})

createNObservable('Rx', 700, function(){
  return baseRx().take(5);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().take(5);
})




title('.delay(1)')

createNObservable('Kefir', 700, function(){
  return baseKefir().delay(1);
})

createNObservable('Rx', 700, function(){
  return baseRx().delay(1);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().delay(1);
})




title('.flatMap(noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().flatMap(noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().flatMap(noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().flatMap(noop);
})




title('.combine(stream, noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().combine(baseKefir(), noop);
})

createNObservable('Rx', 700, function(){
  return baseRx().combineLatest(baseRx(), noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().combine(baseBacon(), noop);
})





title('.toProperty(1).sampledBy(stream, noop)')

createNObservable('Kefir', 700, function(){
  return baseKefir().toProperty(1).sampledBy(baseKefir(), noop);
})

createNObservable('Bacon', 700, function(){
  return baseBacon().toProperty(1).sampledBy(baseBacon(), noop);
})




title('.combineAsArray(stream1, stream2, stream3, stream4)')

createNObservable('Kefir', 500, function(){
  return Kefir.combine([baseKefir(), baseKefir(), baseKefir(), baseKefir()]);
})

createNObservable('Rx', 500, function(){
  return Rx.Observable.forkJoin(baseRx(), baseRx(), baseRx(), baseRx());
})

createNObservable('Bacon', 500, function(){
  return Bacon.combineAsArray(baseBacon(), baseBacon(), baseBacon(), baseBacon());
})




title('.mergeAll(stream1, stream2, stream3, stream4)')

createNObservable('Kefir', 500, function(){
  return Kefir.merge(baseKefir(), baseKefir(), baseKefir(), baseKefir());
})

createNObservable('Rx', 500, function(){
  return Rx.Observable.merge(baseRx(), baseRx(), baseRx(), baseRx());
})

createNObservable('Bacon', 500, function(){
  return Bacon.mergeAll(baseBacon(), baseBacon(), baseBacon(), baseBacon());
})




title('.fromBinder(noop)')

createNObservable('Kefir', 700, function(){
  return Kefir.fromBinder(noop);
})

createNObservable('Bacon', 700, function(){
  return Bacon.fromBinder(noop);
})
